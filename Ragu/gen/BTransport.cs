// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BTransport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace org.herbal3d.basil.protocol.BTransport {

  /// <summary>Holder for reflection information generated from BTransport.proto</summary>
  public static partial class BTransportReflection {

    #region Descriptor
    /// <summary>File descriptor for BTransport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BTransportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBCVHJhbnNwb3J0LnByb3RvEgpCVHJhbnNwb3J0Iq8BCgpCVHJhbnNwb3J0",
            "EhMKC3NlcXVlbmNlTnVtGAEgASgNEg4KBnN0cmVhbRgCIAEoDRIRCglxdWV1",
            "ZVRpbWUYAyABKAQSEAoIc2VuZFRpbWUYBCABKAQSDwoHdHJhY2VJRBgIIAEo",
            "BBIUCgxwYXJlbnRTcGFuSUQYCSABKAQSDgoGc3BhbklEGAogASgEEg8KB3Nh",
            "bXBsZWQYCyABKAgSDwoHbWVzc2FnZRgPIAEoDEIpqgImb3JnLmhlcmJhbDNk",
            "LmJhc2lsLnByb3RvY29sLkJUcmFuc3BvcnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BTransport.BTransport), global::org.herbal3d.basil.protocol.BTransport.BTransport.Parser, new[]{ "SequenceNum", "Stream", "QueueTime", "SendTime", "TraceID", "ParentSpanID", "SpanID", "Sampled", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BTransport : pb::IMessage<BTransport> {
    private static readonly pb::MessageParser<BTransport> _parser = new pb::MessageParser<BTransport>(() => new BTransport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BTransport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BTransport.BTransportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BTransport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BTransport(BTransport other) : this() {
      sequenceNum_ = other.sequenceNum_;
      stream_ = other.stream_;
      queueTime_ = other.queueTime_;
      sendTime_ = other.sendTime_;
      traceID_ = other.traceID_;
      parentSpanID_ = other.parentSpanID_;
      spanID_ = other.spanID_;
      sampled_ = other.sampled_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BTransport Clone() {
      return new BTransport(this);
    }

    /// <summary>Field number for the "sequenceNum" field.</summary>
    public const int SequenceNumFieldNumber = 1;
    private uint sequenceNum_;
    /// <summary>
    /// transport sequence message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 2;
    private uint stream_;
    /// <summary>
    /// stream/queue for message (if handling multiple streams)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }

    /// <summary>Field number for the "queueTime" field.</summary>
    public const int QueueTimeFieldNumber = 3;
    private ulong queueTime_;
    /// <summary>
    /// when message queued
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QueueTime {
      get { return queueTime_; }
      set {
        queueTime_ = value;
      }
    }

    /// <summary>Field number for the "sendTime" field.</summary>
    public const int SendTimeFieldNumber = 4;
    private ulong sendTime_;
    /// <summary>
    /// when message actually sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "traceID" field.</summary>
    public const int TraceIDFieldNumber = 8;
    private ulong traceID_;
    /// <summary>
    /// Trace information
    /// See "https://github.com/openzipkin/b3-propagation" for Zipkin trace description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TraceID {
      get { return traceID_; }
      set {
        traceID_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanID" field.</summary>
    public const int ParentSpanIDFieldNumber = 9;
    private ulong parentSpanID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParentSpanID {
      get { return parentSpanID_; }
      set {
        parentSpanID_ = value;
      }
    }

    /// <summary>Field number for the "spanID" field.</summary>
    public const int SpanIDFieldNumber = 10;
    private ulong spanID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SpanID {
      get { return spanID_; }
      set {
        spanID_ = value;
      }
    }

    /// <summary>Field number for the "sampled" field.</summary>
    public const int SampledFieldNumber = 11;
    private bool sampled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sampled {
      get { return sampled_; }
      set {
        sampled_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 15;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// the actual message being transported
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BTransport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BTransport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceNum != other.SequenceNum) return false;
      if (Stream != other.Stream) return false;
      if (QueueTime != other.QueueTime) return false;
      if (SendTime != other.SendTime) return false;
      if (TraceID != other.TraceID) return false;
      if (ParentSpanID != other.ParentSpanID) return false;
      if (SpanID != other.SpanID) return false;
      if (Sampled != other.Sampled) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      if (Stream != 0) hash ^= Stream.GetHashCode();
      if (QueueTime != 0UL) hash ^= QueueTime.GetHashCode();
      if (SendTime != 0UL) hash ^= SendTime.GetHashCode();
      if (TraceID != 0UL) hash ^= TraceID.GetHashCode();
      if (ParentSpanID != 0UL) hash ^= ParentSpanID.GetHashCode();
      if (SpanID != 0UL) hash ^= SpanID.GetHashCode();
      if (Sampled != false) hash ^= Sampled.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SequenceNum);
      }
      if (Stream != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stream);
      }
      if (QueueTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(QueueTime);
      }
      if (SendTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SendTime);
      }
      if (TraceID != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TraceID);
      }
      if (ParentSpanID != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(ParentSpanID);
      }
      if (SpanID != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(SpanID);
      }
      if (Sampled != false) {
        output.WriteRawTag(88);
        output.WriteBool(Sampled);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNum);
      }
      if (Stream != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stream);
      }
      if (QueueTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QueueTime);
      }
      if (SendTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SendTime);
      }
      if (TraceID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraceID);
      }
      if (ParentSpanID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParentSpanID);
      }
      if (SpanID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpanID);
      }
      if (Sampled != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BTransport other) {
      if (other == null) {
        return;
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      if (other.Stream != 0) {
        Stream = other.Stream;
      }
      if (other.QueueTime != 0UL) {
        QueueTime = other.QueueTime;
      }
      if (other.SendTime != 0UL) {
        SendTime = other.SendTime;
      }
      if (other.TraceID != 0UL) {
        TraceID = other.TraceID;
      }
      if (other.ParentSpanID != 0UL) {
        ParentSpanID = other.ParentSpanID;
      }
      if (other.SpanID != 0UL) {
        SpanID = other.SpanID;
      }
      if (other.Sampled != false) {
        Sampled = other.Sampled;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 16: {
            Stream = input.ReadUInt32();
            break;
          }
          case 24: {
            QueueTime = input.ReadUInt64();
            break;
          }
          case 32: {
            SendTime = input.ReadUInt64();
            break;
          }
          case 64: {
            TraceID = input.ReadUInt64();
            break;
          }
          case 72: {
            ParentSpanID = input.ReadUInt64();
            break;
          }
          case 80: {
            SpanID = input.ReadUInt64();
            break;
          }
          case 88: {
            Sampled = input.ReadBool();
            break;
          }
          case 122: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
