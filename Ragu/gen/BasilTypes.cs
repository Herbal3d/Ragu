// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BasilTypes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace org.herbal3d.basil.protocol.BasilType {

  /// <summary>Holder for reflection information generated from BasilTypes.proto</summary>
  public static partial class BasilTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for BasilTypes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BasilTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBCYXNpbFR5cGVzLnByb3RvEglCYXNpbFR5cGUiKgoHVmVjdG9yMxIJCgF4",
            "GAEgASgBEgkKAXkYAiABKAESCQoBehgDIAEoASI4CgpRdWF0ZXJuaW9uEgkK",
            "AXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMgASgBEgkKAXcYBCABKAEiPwoJ",
            "VHJhbnNmb3JtEg4KBm1hdHJpeBgBIAMoARIiCgZvcmlnaW4YAiABKAsyEi5C",
            "YXNpbFR5cGUuVmVjdG9yMyKDAQoOQmFzaWxFeGNlcHRpb24SDgoGcmVhc29u",
            "GAEgASgJEjMKBWhpbnRzGAIgAygLMiQuQmFzaWxUeXBlLkJhc2lsRXhjZXB0",
            "aW9uLkhpbnRzRW50cnkaLAoKSGludHNFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAk6AjgBIqcBCg1Db29yZFBvc2l0aW9uEh8KA3BvcxgBIAEo",
            "CzISLkJhc2lsVHlwZS5WZWN0b3IzEiIKA3JvdBgCIAEoCzIVLkJhc2lsVHlw",
            "ZS5RdWF0ZXJuaW9uEiYKBnBvc1JlZhgDIAEoDjIWLkJhc2lsVHlwZS5Db29y",
            "ZFN5c3RlbRIpCgZyb3RSZWYYBCABKA4yGS5CYXNpbFR5cGUuUm90YXRpb25T",
            "eXN0ZW0iHgoQT2JqZWN0SWRlbnRpZmllchIKCgJpZBgBIAEoCSIgChJJbnN0",
            "YW5jZUlkZW50aWZpZXISCgoCaWQYASABKAkiZwoNQWFCb3VuZGluZ0JveBIq",
            "Cg51cHBlckZyb250TGVmdBgBIAEoCzISLkJhc2lsVHlwZS5WZWN0b3IzEioK",
            "Dmxvd2VyQmFja1JpZ2h0GAIgASgLMhIuQmFzaWxUeXBlLlZlY3RvcjMitgEK",
            "D0Rpc3BsYXlhYmxlSW5mbxImCgRhYWJiGAEgASgLMhguQmFzaWxUeXBlLkFh",
            "Qm91bmRpbmdCb3gSFwoPZGlzcGxheWFibGVUeXBlGAIgASgJEjQKBWFzc2V0",
            "GAMgAygLMiUuQmFzaWxUeXBlLkRpc3BsYXlhYmxlSW5mby5Bc3NldEVudHJ5",
            "GiwKCkFzc2V0RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "ASJsChBBc3NldEluZm9ybWF0aW9uEicKAmlkGAEgASgLMhsuQmFzaWxUeXBl",
            "Lk9iamVjdElkZW50aWZpZXISLwoLZGlzcGxheUluZm8YAiABKAsyGi5CYXNp",
            "bFR5cGUuRGlzcGxheWFibGVJbmZvIiMKD1BhdGhEZXNjcmlwdGlvbhIQCghw",
            "YXRoVHlwZRgBIAEoCSKzAQoUSW5zdGFuY2VQb3NpdGlvbkluZm8SKQoCaWQY",
            "ASABKAsyHS5CYXNpbFR5cGUuSW5zdGFuY2VJZGVudGlmaWVyEiUKA3BvcxgC",
            "IAEoCzIYLkJhc2lsVHlwZS5Db29yZFBvc2l0aW9uEh8KA3ZlbBgDIAEoCzIS",
            "LkJhc2lsVHlwZS5WZWN0b3IzEigKBHBhdGgYBCABKAsyGi5CYXNpbFR5cGUu",
            "UGF0aERlc2NyaXB0aW9uIp4BChNBY2Nlc3NBdXRob3JpemF0aW9uEk4KEGFj",
            "Y2Vzc1Byb3BlcnRpZXMYASADKAsyNC5CYXNpbFR5cGUuQWNjZXNzQXV0aG9y",
            "aXphdGlvbi5BY2Nlc3NQcm9wZXJ0aWVzRW50cnkaNwoVQWNjZXNzUHJvcGVy",
            "dGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiGQoJ",
            "VHJhY2VJbmZvEgwKBGluZm8YASABKAkqcgoLQ29vcmRTeXN0ZW0SCQoFV0dT",
            "ODYQABIKCgZDQU1FUkEQARINCglDQU1FUkFBQlMQAhILCgdWSVJUVUFMEAMS",
            "CAoETU9PThAEEggKBE1BUlMQBRIICgRSRUwxEAYSCAoEUkVMMhAHEggKBFJF",
            "TDMQCCozCg5Sb3RhdGlvblN5c3RlbRIKCgZXT1JMRFIQABIICgRGT1JSEAES",
            "CwoHQ0FNRVJBUhACQiiqAiVvcmcuaGVyYmFsM2QuYmFzaWwucHJvdG9jb2wu",
            "QmFzaWxUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::org.herbal3d.basil.protocol.BasilType.CoordSystem), typeof(global::org.herbal3d.basil.protocol.BasilType.RotationSystem), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.Vector3), global::org.herbal3d.basil.protocol.BasilType.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.Quaternion), global::org.herbal3d.basil.protocol.BasilType.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.Transform), global::org.herbal3d.basil.protocol.BasilType.Transform.Parser, new[]{ "Matrix", "Origin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.BasilException), global::org.herbal3d.basil.protocol.BasilType.BasilException.Parser, new[]{ "Reason", "Hints" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.CoordPosition), global::org.herbal3d.basil.protocol.BasilType.CoordPosition.Parser, new[]{ "Pos", "Rot", "PosRef", "RotRef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.ObjectIdentifier), global::org.herbal3d.basil.protocol.BasilType.ObjectIdentifier.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.InstanceIdentifier), global::org.herbal3d.basil.protocol.BasilType.InstanceIdentifier.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.AaBoundingBox), global::org.herbal3d.basil.protocol.BasilType.AaBoundingBox.Parser, new[]{ "UpperFrontLeft", "LowerBackRight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.DisplayableInfo), global::org.herbal3d.basil.protocol.BasilType.DisplayableInfo.Parser, new[]{ "Aabb", "DisplayableType", "Asset" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.AssetInformation), global::org.herbal3d.basil.protocol.BasilType.AssetInformation.Parser, new[]{ "Id", "DisplayInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.PathDescription), global::org.herbal3d.basil.protocol.BasilType.PathDescription.Parser, new[]{ "PathType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.InstancePositionInfo), global::org.herbal3d.basil.protocol.BasilType.InstancePositionInfo.Parser, new[]{ "Id", "Pos", "Vel", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.AccessAuthorization), global::org.herbal3d.basil.protocol.BasilType.AccessAuthorization.Parser, new[]{ "AccessProperties" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::org.herbal3d.basil.protocol.BasilType.TraceInfo), global::org.herbal3d.basil.protocol.BasilType.TraceInfo.Parser, new[]{ "Info" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CoordSystem {
    /// <summary>
    /// WGS84 earth coordinates
    /// </summary>
    [pbr::OriginalName("WGS86")] Wgs86 = 0,
    /// <summary>
    /// Coordinates relative to camera position (-1..1 range, zero center)
    /// </summary>
    [pbr::OriginalName("CAMERA")] Camera = 1,
    /// <summary>
    /// Absolute coordinates relative to the camera position (zero center)
    /// </summary>
    [pbr::OriginalName("CAMERAABS")] Cameraabs = 2,
    /// <summary>
    /// Zero based un-rooted coordinates
    /// </summary>
    [pbr::OriginalName("VIRTUAL")] Virtual = 3,
    /// <summary>
    /// Earth-moon coordinates
    /// </summary>
    [pbr::OriginalName("MOON")] Moon = 4,
    /// <summary>
    /// Mars coordinates
    /// </summary>
    [pbr::OriginalName("MARS")] Mars = 5,
    /// <summary>
    /// Mutually agreed base coordinates
    /// </summary>
    [pbr::OriginalName("REL1")] Rel1 = 6,
    [pbr::OriginalName("REL2")] Rel2 = 7,
    [pbr::OriginalName("REL3")] Rel3 = 8,
  }

  public enum RotationSystem {
    /// <summary>
    /// rotation is relative to world coordinates
    /// </summary>
    [pbr::OriginalName("WORLDR")] Worldr = 0,
    /// <summary>
    /// rotation is relative to current frame of reference
    /// </summary>
    [pbr::OriginalName("FORR")] Forr = 1,
    /// <summary>
    /// rotation is relative to the camera direction
    /// </summary>
    [pbr::OriginalName("CAMERAR")] Camerar = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// GEOMETRY ==================================
  /// </summary>
  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private double w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (W != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (W != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (W != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.W != 0D) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            W = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      matrix_ = other.matrix_.Clone();
      Origin = other.origin_ != null ? other.Origin.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_matrix_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> matrix_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// 9 doubles making a row-ordered 3x3 matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private global::org.herbal3d.basil.protocol.BasilType.Vector3 origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.Vector3 Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matrix_.Equals(other.matrix_)) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matrix_.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matrix_.WriteTo(output, _repeated_matrix_codec);
      if (origin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      matrix_.Add(other.matrix_);
      if (other.origin_ != null) {
        if (origin_ == null) {
          origin_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
        }
        Origin.MergeFrom(other.Origin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 18: {
            if (origin_ == null) {
              origin_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
            }
            input.ReadMessage(origin_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasilException : pb::IMessage<BasilException> {
    private static readonly pb::MessageParser<BasilException> _parser = new pb::MessageParser<BasilException>(() => new BasilException());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasilException> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasilException() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasilException(BasilException other) : this() {
      reason_ = other.reason_;
      hints_ = other.hints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasilException Clone() {
      return new BasilException(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private string reason_ = "";
    /// <summary>
    /// explanation of exception
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hints" field.</summary>
    public const int HintsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_hints_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> hints_ = new pbc::MapField<string, string>();
    /// <summary>
    /// additional information for recovery. Error dependent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Hints {
      get { return hints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasilException);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasilException other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      if (!Hints.Equals(other.Hints)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      hash ^= Hints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reason);
      }
      hints_.WriteTo(output, _map_hints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      size += hints_.CalculateSize(_map_hints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasilException other) {
      if (other == null) {
        return;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      hints_.Add(other.hints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Reason = input.ReadString();
            break;
          }
          case 18: {
            hints_.AddEntriesFrom(input, _map_hints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoordPosition : pb::IMessage<CoordPosition> {
    private static readonly pb::MessageParser<CoordPosition> _parser = new pb::MessageParser<CoordPosition>(() => new CoordPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoordPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordPosition(CoordPosition other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Rot = other.rot_ != null ? other.Rot.Clone() : null;
      posRef_ = other.posRef_;
      rotRef_ = other.rotRef_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordPosition Clone() {
      return new CoordPosition(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::org.herbal3d.basil.protocol.BasilType.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 2;
    private global::org.herbal3d.basil.protocol.BasilType.Quaternion rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.Quaternion Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    /// <summary>Field number for the "posRef" field.</summary>
    public const int PosRefFieldNumber = 3;
    private global::org.herbal3d.basil.protocol.BasilType.CoordSystem posRef_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.CoordSystem PosRef {
      get { return posRef_; }
      set {
        posRef_ = value;
      }
    }

    /// <summary>Field number for the "rotRef" field.</summary>
    public const int RotRefFieldNumber = 4;
    private global::org.herbal3d.basil.protocol.BasilType.RotationSystem rotRef_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.RotationSystem RotRef {
      get { return rotRef_; }
      set {
        rotRef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoordPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoordPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      if (PosRef != other.PosRef) return false;
      if (RotRef != other.RotRef) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      if (PosRef != 0) hash ^= PosRef.GetHashCode();
      if (RotRef != 0) hash ^= RotRef.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (rot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rot);
      }
      if (PosRef != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PosRef);
      }
      if (RotRef != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RotRef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      if (PosRef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PosRef);
      }
      if (RotRef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RotRef);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoordPosition other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          rot_ = new global::org.herbal3d.basil.protocol.BasilType.Quaternion();
        }
        Rot.MergeFrom(other.Rot);
      }
      if (other.PosRef != 0) {
        PosRef = other.PosRef;
      }
      if (other.RotRef != 0) {
        RotRef = other.RotRef;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (rot_ == null) {
              rot_ = new global::org.herbal3d.basil.protocol.BasilType.Quaternion();
            }
            input.ReadMessage(rot_);
            break;
          }
          case 24: {
            posRef_ = (global::org.herbal3d.basil.protocol.BasilType.CoordSystem) input.ReadEnum();
            break;
          }
          case 32: {
            rotRef_ = (global::org.herbal3d.basil.protocol.BasilType.RotationSystem) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The globally unique identifier of an object is a string (text GUID or URI)
  /// typedef string objectIdentifier
  /// </summary>
  public sealed partial class ObjectIdentifier : pb::IMessage<ObjectIdentifier> {
    private static readonly pb::MessageParser<ObjectIdentifier> _parser = new pb::MessageParser<ObjectIdentifier>(() => new ObjectIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIdentifier(ObjectIdentifier other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIdentifier Clone() {
      return new ObjectIdentifier(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An object is realized in the world as an 'instance' which has position and
  ///    other individual properties. There can be multiple instances of an object.
  ///    Instances are referenced by an ID given to them when created.
  /// ID lifetime is the life of the particular Basil server being used.
  /// </summary>
  public sealed partial class InstanceIdentifier : pb::IMessage<InstanceIdentifier> {
    private static readonly pb::MessageParser<InstanceIdentifier> _parser = new pb::MessageParser<InstanceIdentifier>(() => new InstanceIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceIdentifier(InstanceIdentifier other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceIdentifier Clone() {
      return new InstanceIdentifier(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An axis aligned area that contains an object
  /// </summary>
  public sealed partial class AaBoundingBox : pb::IMessage<AaBoundingBox> {
    private static readonly pb::MessageParser<AaBoundingBox> _parser = new pb::MessageParser<AaBoundingBox>(() => new AaBoundingBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AaBoundingBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AaBoundingBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AaBoundingBox(AaBoundingBox other) : this() {
      UpperFrontLeft = other.upperFrontLeft_ != null ? other.UpperFrontLeft.Clone() : null;
      LowerBackRight = other.lowerBackRight_ != null ? other.LowerBackRight.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AaBoundingBox Clone() {
      return new AaBoundingBox(this);
    }

    /// <summary>Field number for the "upperFrontLeft" field.</summary>
    public const int UpperFrontLeftFieldNumber = 1;
    private global::org.herbal3d.basil.protocol.BasilType.Vector3 upperFrontLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.Vector3 UpperFrontLeft {
      get { return upperFrontLeft_; }
      set {
        upperFrontLeft_ = value;
      }
    }

    /// <summary>Field number for the "lowerBackRight" field.</summary>
    public const int LowerBackRightFieldNumber = 2;
    private global::org.herbal3d.basil.protocol.BasilType.Vector3 lowerBackRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.Vector3 LowerBackRight {
      get { return lowerBackRight_; }
      set {
        lowerBackRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AaBoundingBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AaBoundingBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpperFrontLeft, other.UpperFrontLeft)) return false;
      if (!object.Equals(LowerBackRight, other.LowerBackRight)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (upperFrontLeft_ != null) hash ^= UpperFrontLeft.GetHashCode();
      if (lowerBackRight_ != null) hash ^= LowerBackRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (upperFrontLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpperFrontLeft);
      }
      if (lowerBackRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LowerBackRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (upperFrontLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpperFrontLeft);
      }
      if (lowerBackRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowerBackRight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AaBoundingBox other) {
      if (other == null) {
        return;
      }
      if (other.upperFrontLeft_ != null) {
        if (upperFrontLeft_ == null) {
          upperFrontLeft_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
        }
        UpperFrontLeft.MergeFrom(other.UpperFrontLeft);
      }
      if (other.lowerBackRight_ != null) {
        if (lowerBackRight_ == null) {
          lowerBackRight_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
        }
        LowerBackRight.MergeFrom(other.LowerBackRight);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (upperFrontLeft_ == null) {
              upperFrontLeft_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
            }
            input.ReadMessage(upperFrontLeft_);
            break;
          }
          case 18: {
            if (lowerBackRight_ == null) {
              lowerBackRight_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
            }
            input.ReadMessage(lowerBackRight_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayableInfo : pb::IMessage<DisplayableInfo> {
    private static readonly pb::MessageParser<DisplayableInfo> _parser = new pb::MessageParser<DisplayableInfo>(() => new DisplayableInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayableInfo(DisplayableInfo other) : this() {
      Aabb = other.aabb_ != null ? other.Aabb.Clone() : null;
      displayableType_ = other.displayableType_;
      asset_ = other.asset_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayableInfo Clone() {
      return new DisplayableInfo(this);
    }

    /// <summary>Field number for the "aabb" field.</summary>
    public const int AabbFieldNumber = 1;
    private global::org.herbal3d.basil.protocol.BasilType.AaBoundingBox aabb_;
    /// <summary>
    /// bounding box for quick LOD, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.AaBoundingBox Aabb {
      get { return aabb_; }
      set {
        aabb_ = value;
      }
    }

    /// <summary>Field number for the "displayableType" field.</summary>
    public const int DisplayableTypeFieldNumber = 2;
    private string displayableType_ = "";
    /// <summary>
    /// type name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayableType {
      get { return displayableType_; }
      set {
        displayableType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_asset_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> asset_ = new pbc::MapField<string, string>();
    /// <summary>
    /// attributes that make up the asset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Asset {
      get { return asset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Aabb, other.Aabb)) return false;
      if (DisplayableType != other.DisplayableType) return false;
      if (!Asset.Equals(other.Asset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aabb_ != null) hash ^= Aabb.GetHashCode();
      if (DisplayableType.Length != 0) hash ^= DisplayableType.GetHashCode();
      hash ^= Asset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aabb_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Aabb);
      }
      if (DisplayableType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayableType);
      }
      asset_.WriteTo(output, _map_asset_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aabb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aabb);
      }
      if (DisplayableType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayableType);
      }
      size += asset_.CalculateSize(_map_asset_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayableInfo other) {
      if (other == null) {
        return;
      }
      if (other.aabb_ != null) {
        if (aabb_ == null) {
          aabb_ = new global::org.herbal3d.basil.protocol.BasilType.AaBoundingBox();
        }
        Aabb.MergeFrom(other.Aabb);
      }
      if (other.DisplayableType.Length != 0) {
        DisplayableType = other.DisplayableType;
      }
      asset_.Add(other.asset_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (aabb_ == null) {
              aabb_ = new global::org.herbal3d.basil.protocol.BasilType.AaBoundingBox();
            }
            input.ReadMessage(aabb_);
            break;
          }
          case 18: {
            DisplayableType = input.ReadString();
            break;
          }
          case 26: {
            asset_.AddEntriesFrom(input, _map_asset_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of the asset information for a displayable object
  /// </summary>
  public sealed partial class AssetInformation : pb::IMessage<AssetInformation> {
    private static readonly pb::MessageParser<AssetInformation> _parser = new pb::MessageParser<AssetInformation>(() => new AssetInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetInformation(AssetInformation other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      DisplayInfo = other.displayInfo_ != null ? other.DisplayInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetInformation Clone() {
      return new AssetInformation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::org.herbal3d.basil.protocol.BasilType.ObjectIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.ObjectIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "displayInfo" field.</summary>
    public const int DisplayInfoFieldNumber = 2;
    private global::org.herbal3d.basil.protocol.BasilType.DisplayableInfo displayInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.DisplayableInfo DisplayInfo {
      get { return displayInfo_; }
      set {
        displayInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(DisplayInfo, other.DisplayInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (displayInfo_ != null) hash ^= DisplayInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (displayInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DisplayInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (displayInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetInformation other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::org.herbal3d.basil.protocol.BasilType.ObjectIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.displayInfo_ != null) {
        if (displayInfo_ == null) {
          displayInfo_ = new global::org.herbal3d.basil.protocol.BasilType.DisplayableInfo();
        }
        DisplayInfo.MergeFrom(other.DisplayInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::org.herbal3d.basil.protocol.BasilType.ObjectIdentifier();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (displayInfo_ == null) {
              displayInfo_ = new global::org.herbal3d.basil.protocol.BasilType.DisplayableInfo();
            }
            input.ReadMessage(displayInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of a path that the object is moving on. Future
  /// </summary>
  public sealed partial class PathDescription : pb::IMessage<PathDescription> {
    private static readonly pb::MessageParser<PathDescription> _parser = new pb::MessageParser<PathDescription>(() => new PathDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathDescription(PathDescription other) : this() {
      pathType_ = other.pathType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathDescription Clone() {
      return new PathDescription(this);
    }

    /// <summary>Field number for the "pathType" field.</summary>
    public const int PathTypeFieldNumber = 1;
    private string pathType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathType {
      get { return pathType_; }
      set {
        pathType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathType != other.PathType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathType.Length != 0) hash ^= PathType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PathType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathDescription other) {
      if (other == null) {
        return;
      }
      if (other.PathType.Length != 0) {
        PathType = other.PathType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PathType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A specification of object motion/position
  /// </summary>
  public sealed partial class InstancePositionInfo : pb::IMessage<InstancePositionInfo> {
    private static readonly pb::MessageParser<InstancePositionInfo> _parser = new pb::MessageParser<InstancePositionInfo>(() => new InstancePositionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstancePositionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstancePositionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstancePositionInfo(InstancePositionInfo other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Vel = other.vel_ != null ? other.Vel.Clone() : null;
      Path = other.path_ != null ? other.Path.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstancePositionInfo Clone() {
      return new InstancePositionInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::org.herbal3d.basil.protocol.BasilType.InstanceIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.InstanceIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::org.herbal3d.basil.protocol.BasilType.CoordPosition pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.CoordPosition Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "vel" field.</summary>
    public const int VelFieldNumber = 3;
    private global::org.herbal3d.basil.protocol.BasilType.Vector3 vel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.Vector3 Vel {
      get { return vel_; }
      set {
        vel_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 4;
    private global::org.herbal3d.basil.protocol.BasilType.PathDescription path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::org.herbal3d.basil.protocol.BasilType.PathDescription Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstancePositionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstancePositionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Vel, other.Vel)) return false;
      if (!object.Equals(Path, other.Path)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (vel_ != null) hash ^= Vel.GetHashCode();
      if (path_ != null) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (vel_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vel);
      }
      if (path_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (vel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vel);
      }
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstancePositionInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::org.herbal3d.basil.protocol.BasilType.InstanceIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::org.herbal3d.basil.protocol.BasilType.CoordPosition();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.vel_ != null) {
        if (vel_ == null) {
          vel_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
        }
        Vel.MergeFrom(other.Vel);
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::org.herbal3d.basil.protocol.BasilType.PathDescription();
        }
        Path.MergeFrom(other.Path);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::org.herbal3d.basil.protocol.BasilType.InstanceIdentifier();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::org.herbal3d.basil.protocol.BasilType.CoordPosition();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (vel_ == null) {
              vel_ = new global::org.herbal3d.basil.protocol.BasilType.Vector3();
            }
            input.ReadMessage(vel_);
            break;
          }
          case 34: {
            if (path_ == null) {
              path_ = new global::org.herbal3d.basil.protocol.BasilType.PathDescription();
            }
            input.ReadMessage(path_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests include authorization for the request.
  /// It is expected that a client could have multiple authorizations from different
  ///    sources and with different scopes so this access authorization blob
  ///    can contain multiple properties which consist of the authorization
  ///    source and a string representing that authorization. The coding
  ///    of the authorization follows the 'Authorization:' header line specified
  ///    in RFC2617 (https://tools.ietf.org/html/rfc2617)
  ///    which is a scheme token followed by an encoding of the authentication.
  /// </summary>
  public sealed partial class AccessAuthorization : pb::IMessage<AccessAuthorization> {
    private static readonly pb::MessageParser<AccessAuthorization> _parser = new pb::MessageParser<AccessAuthorization>(() => new AccessAuthorization());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessAuthorization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessAuthorization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessAuthorization(AccessAuthorization other) : this() {
      accessProperties_ = other.accessProperties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessAuthorization Clone() {
      return new AccessAuthorization(this);
    }

    /// <summary>Field number for the "accessProperties" field.</summary>
    public const int AccessPropertiesFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_accessProperties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> accessProperties_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> AccessProperties {
      get { return accessProperties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessAuthorization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessAuthorization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AccessProperties.Equals(other.AccessProperties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AccessProperties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accessProperties_.WriteTo(output, _map_accessProperties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accessProperties_.CalculateSize(_map_accessProperties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessAuthorization other) {
      if (other == null) {
        return;
      }
      accessProperties_.Add(other.accessProperties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accessProperties_.AddEntriesFrom(input, _map_accessProperties_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests can include trace information (like using Zipkin)
  ///   to trace calls. It's usually a JSON string but can be more complex.
  /// </summary>
  public sealed partial class TraceInfo : pb::IMessage<TraceInfo> {
    private static readonly pb::MessageParser<TraceInfo> _parser = new pb::MessageParser<TraceInfo>(() => new TraceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::org.herbal3d.basil.protocol.BasilType.BasilTypesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceInfo(TraceInfo other) : this() {
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceInfo Clone() {
      return new TraceInfo(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
